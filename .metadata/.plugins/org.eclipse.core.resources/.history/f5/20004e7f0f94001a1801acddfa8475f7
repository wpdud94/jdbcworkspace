package broker.three.client;
/*
 * Protocol + Jury
 * 서버----ProtocolHandler
 * 클라이언트 --- Broker
 */
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.net.Socket;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Vector;

import broker.three.exception.DuplicateSSNException;
import broker.three.exception.InvalidTransactionException;
import broker.three.exception.RecordNotFoundException;
import broker.three.shares.Command;
import broker.three.vo.CustomerRec;
import broker.three.vo.SharesRec;
import broker.three.vo.StockRec;

//Database의 동명이인
//클라이언트 사이드의 통신의 대표주자...Socket...스트림
public class Protocol {
	
	private Socket s;
	private ObjectOutputStream oos;
	private ObjectInputStream ois;
	private Command cmd;
	public static final int MIDDLE_PORT = 60000;	
	Vector<SharesRec> sr = new Vector<SharesRec>();
	
	public Protocol(String serverIp) throws Exception{
		s = new Socket(serverIp, MIDDLE_PORT);
		oos = new ObjectOutputStream(s.getOutputStream());
		ois = new ObjectInputStream(s.getInputStream());		
	}
	
	public void close() {
		try {
			s.close();
		}catch(Exception e) {
			System.out.println("Protocol.close()...."+e);
		}
	}
	
	//공통적인 로직 작성....중복되는 코드 
	public void writeCommand(Command cmd) {
		try {
			oos.writeObject(cmd);
			System.out.println("Client writeCommand....end..");
		}catch(IOException e) {
			System.out.println("Client Protocol writeCommand....error"+e);
		}
	}
	
	public int getResponse() { //readObject() + getResults().getStatus()--> status code
		try {
			cmd =(Command)ois.readObject();
			System.out.println("client readObject()....end...");			
		}catch(Exception e){
			System.out.println("client getResponse()....error"+e);	
		}
		//0, DuplicateE(-2), RecordNE(-1), InvalidTE(-3)
		int status=cmd.getResults().getStatus();
		return status;
	}
	
	public void addCustomer(CustomerRec cust) throws DuplicateSSNException {
		/*
		 * 1. 도시락 싼다.
		 * 2. 던진다...Jury 가 받는다
		 * --------------------------------
		 * 3. Jury다 던진 도시락 다시 받는다
		 * 4. 양수|정상   음수|펑
		 */
		//도시락 싼다
		cmd = new Command(Command.ADDCUSTOMER);
		String[ ] str = {cust.getSsn(), cust.getName(), cust.getAddress()};
		cmd.setArgs(str);
		
		//도시락 날린다.
		writeCommand(cmd);
		
		//Jury가 보낸 데이타 받는다....응답결과
		int status=getResponse();
		if(status==-2) throw new DuplicateSSNException("그런 회원 이미 있어요..");
	}
	public void deleteCustomer(String ssn) throws RecordNotFoundException {
		cmd = new Command(Command.DELETECUSTOMER);
		String[ ] str = {ssn};
		cmd.setArgs(str);
		
		writeCommand(cmd);
		
		int status = getResponse();
		if(status==-1) throw new RecordNotFoundException("그런 회원 없어요");
	}
	
	public void updateCustomer(CustomerRec cust) throws RecordNotFoundException  {
		cmd = new Command(Command.UPDATECUSTOMER);
		String[ ] str = {cust.getSsn(), cust.getName(), cust.getAddress()};
		cmd.setArgs(str);
		
		writeCommand(cmd);
		
		int status = getResponse();
		if(status==-1) throw new RecordNotFoundException("그런 회원 없어요");
	}
	
	public Vector<SharesRec> getPortfolio(String ssn){
		cmd = new Command(Command.GETSTOCKPRICE);
		String[ ] str = {ssn};
		cmd.setArgs(str);
		
		writeCommand(cmd);
		
		int status = getResponse()
				;
		return (Vector<SharesRec>) cmd.getResults().get(0) ;
	}
	
	public CustomerRec getCustomer(String ssn){
		CustomerRec cr = null;
		
		cmd = new Command(Command.GETCUSTOMER);
		String[ ] str = {ssn};
		cmd.setArgs(str);
		
		writeCommand(cmd);
		
		int status = getResponse(); // 상태값, 결과값 받음 
		return (CustomerRec) cmd.getResults().get(0);
	}
	
	public ArrayList<CustomerRec> getAllCustomers(){
		ArrayList<CustomerRec> cr = new ArrayList<CustomerRec>();
		cmd = new Command(Command.GETALLCUSTOMERS);
		
		writeCommand(cmd);
		
		int status = getResponse();
		close();
		return (ArrayList<CustomerRec>) cmd.getResults().get(0);
	}
	
	public ArrayList<StockRec> getAllStocks(){
		cmd = new Command(Command.GETALLSTOCK);
		
		writeCommand(cmd);
		
		int status = getResponse();
		close();
		return (ArrayList<StockRec>) cmd.getResults().get(0);
	}
	
	public void buyShares(String ssn, String symbol, int quantity)  {
		cmd = new Command(Command.BUYSHARES);
		String[ ] str = {ssn, symbol, String.valueOf(quantity)};
		cmd.setArgs(str);
		
		writeCommand(cmd);
		
		int status = getResponse();
		
		close();
	}
	public void sellShares(String ssn, String symbol, int quantity) throws RecordNotFoundException, InvalidTransactionException  {
		cmd = new Command(Command.SELLSHARES);
		String[ ] str = {ssn, symbol, String.valueOf(quantity)};
		cmd.setArgs(str);
		
		writeCommand(cmd);
		
		int status = getResponse();
		if(status==-1) throw new RecordNotFoundException("그런 회원 없어요");
		if(status==-3) throw new InvalidTransactionException("가진 주식보다 더 팔 수 없어요");
		
		close();
	}
}

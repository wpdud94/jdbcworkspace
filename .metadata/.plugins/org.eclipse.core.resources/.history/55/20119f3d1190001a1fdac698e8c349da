package jdbc.step1.simple;

import java.sql.Connection;
import java.sql.Driver;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;

import config.ServerInfo;

/*
JDBC 5단계
구조적으로 작성
1. 드라이버 로딩 => 가장 먼저 한 번 만 필요 => static Block
2. DB 연결 : 메소드 하나가 완벽한 서비스이기에 2~5는 매 서비스마다 반복해야 함
3. PreparedStatement 생성
4. 쿼리문 실행
5. close
 */
/*
<JDBC 메소드 구조적 작성>
# 메소드마다 반복되는 부분은 비효율적
- 프로그램에서는 그 부분을 윗단에 올려서(추상화) 줄임

# 반복
1) 고정적인 반복
- DB연결 부분
- 자원 반납
⇒ 공통적인 메소드로 정의하고… 메소드마다 호출해서 사용하기

2) 변동적인 반복
- PreparedStatement
- 뽑아내지 못한다.

 */
public class SimpleMVCPersonTest {
	// 공통적인 부분을 정의
	public Connection getConnect() throws SQLException{
		Connection conn = DriverManager.getConnection(ServerInfo.URL, ServerInfo.USER, ServerInfo.PASSWORD);
		System.out.println("DataBase Connection...");
		return conn;
	}
	
	public void closeAll(PreparedStatement ps, Connection conn) throws SQLException {
		if(ps!=null) ps.close();
		if(conn!=null) conn.close();
	}
	
	public void addPerson(int ssn, String name, String address) throws SQLException {
		//DB연결, PreparedStatement, 쿼리문 수행, close
		Connection conn = null;
		PreparedStatement ps = null;
		
		conn = getConnect();
		
		String query = "INSERT INTO person(ssn, name, address) VALUES(?,?,?)";
		ps = conn.prepareStatement(query);
		
		System.out.println("값 바인드");
		ps.setInt(1, ssn);
		ps.setString(2, name);
		ps.setString(3, address);
		
		System.out.println("실행");
		ps.executeUpdate();
		System.out.println(name+ " 님, 회원가입되셨습니다.");
		
		closeAll(ps, conn);
		}
	public void removePerson(int ssn, String name) throws SQLException {
		//DB연결, PreparedStatement, 쿼리문 수행, close
		Connection conn = null;
		PreparedStatement ps = null;
		
		getConnect();
		
		String query = "DELETE FROM person WHERE ssn = ?";
		PreparedStatement ps = conn.prepareStatement(query);
		
		ps.setInt(1, ssn);
		
		ps.executeUpdate();
		System.out.println(name+" 님, 회원탈퇴하셨습니다.");
		
		ps.close();
		conn.close();
		
	}
	public void updatePerson(int ssn, String name, String address) throws SQLException {
		//DB연결, PreparedStatement, 쿼리문 수행, close
		Connection conn = DriverManager.getConnection(ServerInfo.URL, ServerInfo.USER, ServerInfo.PASSWORD);
		
		String qeury = "UPDATE person set name = ?, address = ? WHERE ssn=?";
		PreparedStatement ps = conn.prepareCall(qeury);
		
		ps.setString(1, name);
		ps.setString(2, address);
		ps.setInt(3, ssn);
		
		ps.executeUpdate();
		System.out.println(name+" 님의 회원 정보가 수정됐습니다.");
		
		ps.close();
		conn.close();
	}
	public void searchAPerson(int ssn) throws SQLException {
		//DB연결, PreparedStatement, 쿼리문 수행, close
		Connection conn = DriverManager.getConnection(ServerInfo.URL, ServerInfo.USER, ServerInfo.PASSWORD);
		
		String query = "SELECT ssn, name, address FROM person WHERE ssn = ?";
		PreparedStatement ps = conn.prepareStatement(query);
		
		ps.setInt(1, ssn);
		
		ResultSet rs = ps.executeQuery();
		while(rs.next()) {
			System.out.println(rs.getString("name")+" 님의 회원정보를 검색합니다.");
			System.out.println(rs.getInt("ssn")+", "+rs.getString("name")+", "+rs.getString("address"));
		}
		
		ps.close();
		conn.close();
	}
	public void searchAllPerson() throws SQLException {
		//DB연결, PreparedStatement, 쿼리문 수행, close
		Connection conn = DriverManager.getConnection(ServerInfo.URL, ServerInfo.USER, ServerInfo.PASSWORD);
		
		String query = "SELECT ssn, name, address FROM person";
		PreparedStatement ps = conn.prepareStatement(query);
		
		ResultSet rs = ps.executeQuery();
		
		System.out.println("모든 회원님의 정보를 검색합니다.");
		while(rs.next()) {
			System.out.println(rs.getInt("ssn")+", "+rs.getString("name")+", "+rs.getString("address"));
		}
		
	}
	public static void main(String[] args) {
		SimpleMVCPersonTest mvc = new SimpleMVCPersonTest();
		/*try {
			mvc.addPerson(444, "아이유", "제주도");
		} catch (SQLException e) {
			System.out.println("회원 가입 실패...");
		}*/ // calling		
		
		/*try {
			mvc.removePerson(444, "아이유");
		} catch (SQLException e) {
			System.out.println("회원탈퇴 실패...");
		}*/
		
		try {
			mvc.updatePerson(444, "아이유", "청담동");
		} catch (SQLException e) {
			System.out.println("회원 정보 수정 실패...");
		}
		
		try {
			mvc.searchAPerson(555);
		} catch (SQLException e) {
			System.out.println("회원 검색 실패...");
		}
		
		try {
			mvc.searchAllPerson();
		}catch(SQLException e) {
			System.out.println("모든 회원 정보 검색 실패...");
		}
	}
	
	//static 초기화 Block : main보다 먼저 돌아간다
	static {
		try {
			Class.forName(ServerInfo.DRIVER_NAME);
			System.out.println("Driver Loading... Success");
		}catch(ClassNotFoundException e) {
			System.out.println("Driver Loading Fail");
		}
	}

}

package broker.twoteir.dao;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Vector;

import broker.twoteir.vo.CustomerRec;
import broker.twoteir.vo.SharesRec;
import broker.twoteir.vo.StockRec;
import config.ServerInfo;
// 3tier에 그대로 쓸 수 있도록 만들 것. 고치더라도 조금 고칠 수 있게.


public class Database implements DatabaseTemplate {
	
	public Database(String serverIP) throws ClassNotFoundException{
		Class.forName(ServerInfo.DRIVER_NAME);
		System.out.println("드라이버 로딩 성공");
	}
	//공통로직
	@Override
	public Connection getConnection() throws SQLException {
		Connection conn = DriverManager.getConnection(ServerInfo.URL, ServerInfo.USER, ServerInfo.PASSWORD);
		System.out.println("데이터베이스 연결");
		return conn;
	}

	@Override
	public void closeAll(PreparedStatement ps, Connection conn) throws SQLException {
		if(ps!=null) ps.close();
		if(conn!=null) conn.close();
	}

	@Override
	public void closeAll(ResultSet rs, PreparedStatement ps, Connection conn) throws SQLException {
		if(rs!=null) rs.close();
		closeAll(ps, conn);
	}
	
	// 예외 처리 : 있는데 또 추가 + 없는데 찾기(record not found) + 주식매매 시 0범위 넘어설 때
	@Override
	public void addCustomer(CustomerRec cust) throws SQLException {
		
	}

	@Override
	public void deleteCustomer(String ssn) throws SQLException {
		
	}

	@Override
	public void updateCustomer(CustomerRec cust) throws SQLException {
		
	}

	@Override
	public Vector<SharesRec> getPortfolio(String ssn) throws SQLException {
		return null;
	}

	@Override
	public CustomerRec getCustomer(String ssn) throws SQLException {
		return null;
	}

	@Override
	public ArrayList<CustomerRec> getAllCustomers() throws SQLException {
		return null;
	}

	@Override
	public ArrayList<StockRec> getAllStocks() throws SQLException {
		return null;
	}

	@Override
	public void buyShares(String ssn, String symbol, int quantity) throws SQLException {
		
	}

	@Override
	public void sellShares(String ssn, String symbol, int quantity) throws SQLException {
		
	}

}

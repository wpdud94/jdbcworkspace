package broker.twotier.dao.impl;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Vector;

import broker.twotier.dao.DatabaseTemplate;
import broker.twotier.exception.DuplicateSSNException;import broker.twotier.exception.InvalidTransactionException;
import broker.twotier.exception.RecordNotFoundException;
import broker.twotier.vo.CustomerRec;
import broker.twotier.vo.SharesRec;
import broker.twotier.vo.StockRec;
import config.ServerInfo;
// 3tier에 그대로 쓸 수 있도록 만들 것. 고치더라도 조금 고칠 수 있게.


public class Database implements DatabaseTemplate {
	
	public Database(String serverIP) throws ClassNotFoundException{
		Class.forName(ServerInfo.DRIVER_NAME);
		System.out.println("드라이버 로딩 성공");
	}
	//공통로직
	@Override
	public Connection getConnection() throws SQLException {
		Connection conn = DriverManager.getConnection(ServerInfo.URL, ServerInfo.USER, ServerInfo.PASSWORD);
		System.out.println("데이터베이스 연결");
		return conn;
	}

	@Override
	public void closeAll(PreparedStatement ps, Connection conn) throws SQLException {
		if(ps!=null) ps.close();
		if(conn!=null) conn.close();
	}

	@Override
	public void closeAll(ResultSet rs, PreparedStatement ps, Connection conn) throws SQLException {
		if(rs!=null) rs.close();
		closeAll(ps, conn);
	}
	// getCustomer 재호출해도 되는데, 전문적으로 ssn만 보는 기능을 따로 만드는 게 더 세련됨
		public boolean IsExistInCustomer(String ssn, Connection conn) throws SQLException{
			String sql = "SELECT ssn FROM customer WHERE ssn=?";
			PreparedStatement ps = conn.prepareStatement(sql);
			
			ps.setString(1, ssn);
			ResultSet rs = ps.executeQuery();
			return rs.next();
		}
		
		public boolean IsExistInShares(String ssn, Connection conn) throws SQLException{
			String sql = "SELECT ssn FROM shares WHERE ssn=?";
			PreparedStatement ps = conn.prepareStatement(sql);
			
			ps.setString(1, ssn);
			ResultSet rs = ps.executeQuery();
			return rs.next();
		}
		
		/*public boolean isZero(String ssn, Connection conn) throws SQLException{
			String sql = "SELECT quantity FROM shares WHERE ssn=?";
			PreparedStatement ps = conn.prepareStatement(sql);
			
			ps.setString(1, ssn);
			ResultSet rs = ps.executeQuery();
			while(rs.next()) {
				rs.getString("quantity");
			}
			
		}*/
		
	// 예외 처리는 던지는 걸로 해결하고... finally(예외 파트 참고)를 써야하는데 그래서 변수 설명은 위에
	@Override
	public void addCustomer(CustomerRec cust) throws SQLException, DuplicateSSNException {
		Connection conn = null;
		PreparedStatement ps = null;
		
		try {
			conn = getConnection();
			// 중복 예외도!! 쿼리문 나오기 전에! 왜냐! 넣기 전에 해야하니까!
			if(!IsExistInCustomer(cust.getSsn(), conn)) {
				String query = "INSERT INTO customer(ssn, cust_name, address) VALUES(?,?,?)";
				ps = conn.prepareStatement(query);
				
				ps.setString(1, cust.getSsn());
				ps.setString(2, cust.getName());
				ps.setString(3, cust.getAddress());
				
				System.out.println(ps.executeUpdate()+" 명 INSERT OK... addCustomer()...");
			}else {
				throw new DuplicateSSNException(cust.getName()+" 님은 이미 회원이십니다.");
			}
			}finally {
			closeAll(ps, conn);
			// 서버 닫는 것은 중요하다. 따라서 try가 되든 안 되든 무조건 닫아야하기에 finally로 감싸자.
		}
	}

	@Override
	public void deleteCustomer(String ssn) throws SQLException, RecordNotFoundException {
		Connection conn = null;
		PreparedStatement ps = null;
		
		
		try {
		conn = getConnection();
		
		if(IsExistInCustomer(ssn, conn)) {
			String query = "DELETE FROM customer WHERE ssn = ?";
			ps = conn.prepareStatement(query);
			
			ps.setString(1, ssn);
			System.out.println(ps.executeUpdate()+" 명 삭제 완료");
		}else {
			throw new RecordNotFoundException(ssn+"에 해당하는 고객님은 목록에 없습니다.");
		}
		}finally {
			closeAll(ps, conn);
		}
		
	}

	@Override
	public void updateCustomer(CustomerRec cust) throws SQLException, RecordNotFoundException {
		Connection conn = null;
		PreparedStatement ps = null;
		
		try {
		conn = getConnection();
		
		if(IsExistInCustomer(cust.getSsn(), conn)) {
			String query = "UPDATE customer set cust_name = ?, address =? WHERE ssn =?";
			ps = conn.prepareStatement(query);
			
			ps.setString(1, cust.getName());
			ps.setString(2, cust.getAddress());
			ps.setString(3, cust.getSsn());
			
			System.out.println(ps.executeUpdate()+" 명 회원수정 완료");
		}else {
			throw new RecordNotFoundException(cust.getName()+" 님은 회원에 없습니다.");
		}
		}finally {
			closeAll(ps, conn);
		}
	}

	@Override
	public Vector<SharesRec> getPortfolio(String ssn) throws SQLException {
		Connection conn = null;
		PreparedStatement ps = null;
		ResultSet rs = null;
		Vector<SharesRec> vo = new Vector<>();
		
		try {
		conn = getConnection();
		
		String query = "SELECT symbol, quantity FROM shares WHERE ssn =?";
		ps = conn.prepareStatement(query);
		
		ps.setString(1, ssn);
		
		rs = ps.executeQuery();
		if(rs.next()) {
			vo.add(new SharesRec(rs.getString("symbol"), rs.getInt("quantity")));
		}
		}finally {
			closeAll(rs, ps, conn);
		}
		return vo;
	}

	@Override
	public CustomerRec getCustomer(String ssn) throws SQLException {
		Connection conn = null;
		PreparedStatement ps = null;
		ResultSet rs = null;
		CustomerRec vo = null;
		
		try {
		conn = getConnection();
		
		String query = "SELECT ssn, cust_name, address FROM customer WHERE ssn = ?";
		ps = conn.prepareStatement(query);
		ps.setString(1, ssn);
		
		rs=ps.executeQuery();
		if(rs.next()) {
			vo = new CustomerRec(rs.getString("ssn"), rs.getString("cust_name"), rs.getString("address"));
		}
		}finally {
			closeAll(rs, ps, conn);
		}
		return vo;
	}

	@Override
	public ArrayList<CustomerRec> getAllCustomers() throws SQLException {
		Connection conn = null;
		PreparedStatement ps = null;
		ResultSet rs = null;
		ArrayList<CustomerRec> vo = new ArrayList<>();
		
		try {
		conn = getConnection();
		
		String query = "SELECT ssn, cust_name, address FROM customer";
		ps = conn.prepareStatement(query);
		
		rs=ps.executeQuery();
		while(rs.next()) {
			vo.add(new CustomerRec(rs.getString("ssn"), rs.getString("cust_name"), rs.getString("address")));
		}
		}finally {
			closeAll(rs, ps, conn);
		}
		return vo;
		
	}

	@Override
	public ArrayList<StockRec> getAllStocks() throws SQLException {
		return null;
	}

	@Override
	public void buyShares(String ssn, String symbol, int quantity) throws SQLException {
		Connection conn = null;
		PreparedStatement ps = null;
		
		conn = getConnection();
		
		try {
			if(IsExistInShares(ssn, conn)) {
				String query = "UPDATE shares set quantity = quantity + ? WHERE ssn=? AND symbol =?";
				ps = conn.prepareStatement(query);
				
				ps.setInt(1, quantity);
				ps.setString(2, ssn);
				ps.setString(3, symbol);
				
				ps.executeUpdate();
				System.out.println(symbol+" ,"+quantity+" 주 매수완료");
		}else {
				String query = "INSERT INTO shares(ssn, symbol, quantity) VALUES(?, ?, ?);";
				ps = conn.prepareStatement(query);
				
				ps.setString(1, ssn);
				ps.setString(2, symbol);
				ps.setInt(3, quantity);
				
				ps.executeUpdate();
				System.out.println(symbol+" ,"+quantity+" 주 매수완료");
		}
		}finally {
				closeAll(ps, conn);
		}
	}
/*
누가 어떤 주식을 몇 개 팔 것인가?
현재 몇 개를 가지고 있는가? q 
시나리오1
100개를 가지고 있다. 50개를 지금 팔려고 한다. UPDATE 
시나리오2
100개를 가지고 있다. 100개를 지금 팔려고 한다. DELETE
시나리오3
100개를 가지고 있다. 150개를 지금 팔려고 한다. ERROR
시나리오4
주식이 없을 때? ERROE 
 */
	@Override
	public void sellShares(String ssn, String symbol, int quantity) throws SQLException {
		Connection conn = null;
		PreparedStatement ps = null;
		ResultSet rs = null;
		
		try {
			conn= getConnection();
			if(!IsExistInShares(ssn, conn)) {
				throw new RecordNotFoundException("주식을 팔려는 사람이 없어요");
			}else {
				String query = "SELECT quantity FROM shares WHERE ssn=? AND symbol=?";
				ps = conn.prepareStatement(query);
				ps.setString(1, ssn);
				ps.setString(2, symbol);
				rs = ps.executeQuery();
				
				rs.next(); // 일단 커서를 내려 수량을 받아올 준비를 한다
				
				int q = rs.getInt(1); // 100개를 가지고 있다.
				int newQuantity = q - quantity;
			}
		}
}

